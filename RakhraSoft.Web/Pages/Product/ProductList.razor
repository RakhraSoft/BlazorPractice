@page "/product"
@inject IProductRepository ProductRepository
@inject IJSRuntime jsRuntime

<DeleteConfirmationBox IsProcessingDelete="@isLoading" OnResponse="() => ConfirmDelete(true)"/>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Product List</h4>
    </div>
    <div class="col-3 offset-1">
        <a href="Product/create" class="btn btn-info form-control">
            Add New Product
        </a>
    </div>
    <div class="col-12 p-3">
        @if (ProductDTOs.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>
                            Name
                        </th>
                        <th>
                            Shop Favorites
                        </th>
                        <th>
                            Customer Favorites
                        </th>
                        <th>
                            Category
                        </th>
                        <th>
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in ProductDTOs)
                    {
                        <tr>
                            <td>
                                @product.Name
                            </td>
                            <td>
                                <input type="checkbox" disabled checked="@product.CustomerFavorites" />
                            </td>
                            <td>
                                <input type="checkbox" disabled checked="@product.ShowFavorites" />
                            </td>
                            <td>
                                @product.Category?.Name
                            </td>
                            <td>
                                <NavLink href="@($"/product/edit/{product.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="() => HandleDelete(product.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (isLoading)
            {
                <div class="d-flex justify-content-center">
                    <div class="loader" />

                </div>
            }
            else
            {
                <p> No records available!</p>
            }
        }

    </div>
</div>

@code {

    public bool isLoading { get; set; } = true;
    public IEnumerable<ProductDTO> ProductDTOs { get; set; } = new List<ProductDTO>();
    private int DeleteProductId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadProductsAsync();
        }

    }

    private async Task LoadProductsAsync()
    {
        ProductDTOs = await ProductRepository.GetAllAsync();
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async void HandleDelete(int Id)
    {
        DeleteProductId = Id;
        await jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationBox");
    }

    private async void ConfirmDelete(bool confirmDelete)
    {
        isLoading = true;
        if (!confirmDelete)
        {
            return;
        }

        await ProductRepository.DeleteAsync(DeleteProductId);
        await LoadProductsAsync();
        await jsRuntime.InvokeVoidAsync("HideDeleteConfirmationBox");
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }
}
