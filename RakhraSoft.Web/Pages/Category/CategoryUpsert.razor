@page "/category/create"
@page "/category/edit/{id:int}"
@inject ICategoryRepository categoryRepository
@inject NavigationManager navigationManager

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">
        @Title Category
    </h3>
    <div class="col-10">
        @if (IsLoading)
        {
            <div class="d-flex justify-content-center">
                <div class="loader" />
            </div>
        }
        else
        {
            <EditForm Model="Category" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Category.Name" class="form-control"></InputText>
                    <ValidationMessage For="() => Category.Name"></ValidationMessage>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="category" class="btn btn-secondary">Back to Category</NavLink>
                </div>
            </EditForm>
        }

    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    public CategoryDTO Category { get; set; } = new CategoryDTO();
    private string Title { get; set; } = "Create";
    private bool IsLoading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        if (Id == 0)
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            await LoadCategoryAsync();
        }
    }

    private async Task LoadCategoryAsync()
    {
        Category = await categoryRepository.GetAsync(Id);
        Title = "Update";
        IsLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async void UpsertCategory()
    {
        if (Id == 0)
        {
            await categoryRepository.CreateAsync(Category);
        }
        else
        {
            await categoryRepository.UpdateAsync(Category);
        }

        navigationManager.NavigateTo("category");
    }
}

